{
	"info": {
		"_postman_id": "2141f29a-f4c4-4154-a187-a37d518c647a",
		"name": "N26 task",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "products",
			"item": [
				{
					"name": "Get all products",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e8cee373-a180-44a3-9a63-4fbcbbbf98d3",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"postman.setGlobalVariable(\"commonSuccessTests\", () => {",
									"    ",
									"  tests[\"Status code should be valid\"] = (responseCode.code ===  201) || (responseCode.code === 200);",
									"  ",
									"  tests[\"Content-Type should be application/json\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/json;\");",
									"  ",
									"  tests[\"Response time is less than 500ms\"] = responseTime < 500;",
									"  ",
									"    pm.test('Response body should be valid', () => {",
									"    pm.response.to.be.not.empty;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"  });",
									"",
									"});",
									"",
									"eval(globals.commonSuccessTests)();",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get products with limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e8cee373-a180-44a3-9a63-4fbcbbbf98d3",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"postman.setGlobalVariable(\"commonSuccessTests\", () => {",
									"    ",
									"  tests[\"Status code should be valid\"] = (responseCode.code ===  201) || (responseCode.code === 200);",
									"  ",
									"  tests[\"Content-Type should be application/json\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/json;\");",
									"  ",
									"  tests[\"Response time is less than 500ms\"] = responseTime < 500;",
									"  ",
									"    pm.test('Response body should be valid', () => {",
									"    pm.response.to.be.not.empty;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"  });",
									"",
									"});",
									"",
									"eval(globals.commonSuccessTests)();",
									"",
									"",
									"pm.test(\"Limit value should be correct\", function () {",
									"    pm.expect(response.limit).to.eql(10);",
									"});",
									"",
									"pm.test(\"Correct number of objects should be returned\", function () {",
									"    pm.expect(Object.keys(response.data).length).to.eql(10);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/products?$limit=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "$limit",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get products with skip param",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e8cee373-a180-44a3-9a63-4fbcbbbf98d3",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"postman.setGlobalVariable(\"commonSuccessTests\", () => {",
									"    ",
									"  tests[\"Status code should be valid\"] = (responseCode.code ===  201) || (responseCode.code === 200);",
									"  ",
									"  tests[\"Content-Type should be application/json\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/json;\");",
									"  ",
									"  tests[\"Response time is less than 500ms\"] = responseTime < 500;",
									"  ",
									"    pm.test('Response body should be valid', () => {",
									"    pm.response.to.be.not.empty;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"  });",
									"",
									"});",
									"",
									"eval(globals.commonSuccessTests)();",
									"",
									"",
									"pm.test(\"Skip value should be correct\", function () {",
									"    pm.expect(response.skip).to.eql(100);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/products?$skip=100",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "$skip",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get products with price sort desc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e8cee373-a180-44a3-9a63-4fbcbbbf98d3",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"postman.setGlobalVariable(\"commonSuccessTests\", () => {",
									"    ",
									"  tests[\"Status code should be valid\"] = (responseCode.code ===  201) || (responseCode.code === 200);",
									"  ",
									"  tests[\"Content-Type should be application/json\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/json;\");",
									"  ",
									"  tests[\"Response time is less than 500ms\"] = responseTime < 500;",
									"  ",
									"    pm.test('Response body should be valid', () => {",
									"    pm.response.to.be.not.empty;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"  });",
									"",
									"});",
									"",
									"eval(globals.commonSuccessTests)();",
									"",
									"",
									"pm.test(\"Price of product[0] should be the highest\", function () {",
									"    var first_price = response.data[0].price;",
									"    var second_price = response.data[1].price;",
									"    pm.expect(first_price).to.be.above(second_price);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/products?$sort[price]=-1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "$sort[price]",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get products with price sort asc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e8cee373-a180-44a3-9a63-4fbcbbbf98d3",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"postman.setGlobalVariable(\"commonSuccessTests\", () => {",
									"    ",
									"  tests[\"Status code should be valid\"] = (responseCode.code ===  201) || (responseCode.code === 200);",
									"  ",
									"  tests[\"Content-Type should be application/json\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/json;\");",
									"  ",
									"  tests[\"Response time is less than 500ms\"] = responseTime < 500;",
									"  ",
									"    pm.test('Response body should be valid', () => {",
									"    pm.response.to.be.not.empty;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"  });",
									"",
									"});",
									"",
									"eval(globals.commonSuccessTests)();",
									"",
									"",
									"pm.test(\"Price of product[0] should be the lowest\", function () {",
									"    if (response.data[0].price > 0) {",
									"        var first_price = response.data[0].price;",
									"        var second_price = response.data[1].price;",
									"        pm.expect(first_price).to.be.below(second_price);   ",
									"    } else {",
									"         pm.expect(response.data[0].price).to.be.eql(0);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/products?$sort[price]=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "$sort[price]",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all products, show only the name and price in the result",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e8cee373-a180-44a3-9a63-4fbcbbbf98d3",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"postman.setGlobalVariable(\"commonSuccessTests\", () => {",
									"    ",
									"  tests[\"Status code should be valid\"] = (responseCode.code ===  201) || (responseCode.code === 200);",
									"  ",
									"  tests[\"Content-Type should be application/json\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/json;\");",
									"  ",
									"  tests[\"Response time is less than 500ms\"] = responseTime < 500;",
									"  ",
									"    pm.test('Response body should be valid', () => {",
									"    pm.response.to.be.not.empty;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"  });",
									"",
									"});",
									"",
									"eval(globals.commonSuccessTests)();",
									"",
									"",
									"pm.test(\"Just product name and price should be shown\", function () {",
									"    const shortProductSchema = JSON.parse(environment.shortProductSchema);",
									"    pm.expect(tv4.validate(response.data[0], shortProductSchema)).to.be.true;",
									"    console.log(\"Validation is failed: \" + tv4.error);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/products?$select[]=name&$select[]=price",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "$select[]",
									"value": "name"
								},
								{
									"key": "$select[]",
									"value": "price"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get products of type HardGood",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e8cee373-a180-44a3-9a63-4fbcbbbf98d3",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"postman.setGlobalVariable(\"commonSuccessTests\", () => {",
									"    ",
									"  tests[\"Status code should be valid\"] = (responseCode.code ===  201) || (responseCode.code === 200);",
									"  ",
									"  tests[\"Content-Type should be application/json\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/json;\");",
									"  ",
									"  tests[\"Response time is less than 500ms\"] = responseTime < 500;",
									"  ",
									"    pm.test('Response body should be valid', () => {",
									"    pm.response.to.be.not.empty;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"  });",
									"",
									"});",
									"",
									"eval(globals.commonSuccessTests)();",
									"",
									"",
									"",
									"pm.test(\"Should return products with correct type\", function () {",
									"   for (var i= 0; i < response.data.length; i++) {",
									"       pm.expect(response.data[i].type).to.eql(\"HardGood\");",
									"   }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/products?type=HardGood",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "type",
									"value": "HardGood"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get products less than or equal to $1.00",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e8cee373-a180-44a3-9a63-4fbcbbbf98d3",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"postman.setGlobalVariable(\"commonSuccessTests\", () => {",
									"    ",
									"  tests[\"Status code should be valid\"] = (responseCode.code ===  201) || (responseCode.code === 200);",
									"  ",
									"  tests[\"Content-Type should be application/json\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/json;\");",
									"  ",
									"  tests[\"Response time is less than 500ms\"] = responseTime < 500;",
									"  ",
									"    pm.test('Response body should be valid', () => {",
									"    pm.response.to.be.not.empty;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"  });",
									"",
									"});",
									"",
									"eval(globals.commonSuccessTests)();",
									"",
									"",
									"",
									"pm.test(\"Should return products with price <=1$\", function () {",
									"   for (var i= 0; i < response.data.length; i++) {",
									"       pm.expect(response.data[i].price).to.be.greaterThan(0).but.not.greaterThan(1);",
									"   }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/products?price[$lte]=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "price[$lte]",
									"value": "1"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new product",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d7902901-88f0-4436-b0d9-a9a1dfe6fefd",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"eval(globals.commonSuccessTests)();",
									"",
									"pm.test(\"Product json schema  should be valid\", function () {",
									"    const productSchema = JSON.parse(environment.productSchema);",
									"    pm.expect(tv4.validate(response, productSchema)).to.be.true;",
									"    console.log(\"Validation is failed: \" + tv4.error);",
									"});",
									"",
									"",
									"pm.test(\"Product name is correct\", function () {",
									"    pm.expect(response.name).to.eql(\"Test product\");",
									"});",
									"",
									"pm.environment.set(\"product_id\", response.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test product\",\n  \"type\": \"test\",\n  \"price\": 100,\n  \"shipping\": 3,\n  \"upc\": \"string\",\n  \"description\": \"My short description\",\n  \"manufacturer\": \"Demo\",\n  \"model\": \"AA\",\n  \"url\": \"myurl\",\n  \"image\": \"path_to_my_png\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get product details",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d36296bf-003c-486e-b7c2-606283f038fc",
								"exec": [
									"eval(globals.commonSuccessTests)();",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/products/{{product_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"{{product_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update product",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3fe18469-7e4a-4d8e-9842-9319b6ab33bc",
								"exec": [
									"eval(globals.commonSuccessTests)();",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n  \"type\": \"string\",\n  \"price\": 0,\n  \"shipping\": 0,\n  \"upc\": \"string\",\n  \"description\": \"string\",\n  \"manufacturer\": \"string\",\n  \"model\": \"string\",\n  \"url\": \"string\",\n  \"image\": \"string\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/products/{{product_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"{{product_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete product",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b975b2bc-3aa4-4eb3-8a68-193406447e86",
								"exec": [
									"eval(globals.commonSuccessTests)();",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/products/{{product_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"{{product_id}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "\n"
		},
		{
			"name": "stores",
			"item": [
				{
					"name": "Get all stores",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "afc6b66d-5f20-401c-8697-956f150d4805",
								"exec": [
									"eval(globals.commonSuccessTests)();",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/stores",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"stores"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create store",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "047e9a80-b524-4f8f-abf6-685fea4714d6",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"eval(globals.commonSuccessTests)();",
									"",
									"pm.test(\"Store json schema  should be valid\", function () {",
									"    const storeSchema = JSON.parse(environment.storeSchema);",
									"    pm.expect(tv4.validate(response, storeSchema)).to.be.true;",
									"    console.log(\"Validation is failed: \" + tv4.error);",
									"});",
									"",
									"pm.test(\"Store name is correct\", function () {",
									"    pm.expect(response.name).to.eql(\"Demo Store\");",
									"});",
									"",
									"pm.environment.set(\"store_id\", response.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Demo Store\",\n  \"type\": \"test\",\n  \"address\": \"Hohenzollerndamm\",\n  \"address2\": \"34A\",\n  \"city\": \"Berlin\",\n  \"state\": \"string\",\n  \"zip\": \"10717\",\n  \"lat\": 0,\n  \"lng\": 0,\n  \"hours\": \"12\",\n  \"services\": {}\n}"
						},
						"url": {
							"raw": "{{base_url}}/stores",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"stores"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get store details",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d11053a7-ff90-4d54-8d8e-eb82d921c032",
								"exec": [
									"eval(globals.commonSuccessTests)();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/stores/{{store_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"stores",
								"{{store_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update store",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3ae71bf0-64ee-41e9-86e1-723e9083e7d5",
								"exec": [
									"eval(globals.commonSuccessTests)();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n  \"type\": \"string\",\n  \"address\": \"string\",\n  \"address2\": \"string\",\n  \"city\": \"string\",\n  \"state\": \"string\",\n  \"zip\": \"string\",\n  \"lat\": 0,\n  \"lng\": 0,\n  \"hours\": \"string\",\n  \"services\": {}\n}"
						},
						"url": {
							"raw": "{{base_url}}/stores/{{store_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"stores",
								"{{store_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete store",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "db4c1685-35ea-4fa8-876e-8cd16abecd3c",
								"exec": [
									"eval(globals.commonSuccessTests)();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/stores/{{store_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"stores",
								"{{store_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "services",
			"item": [
				{
					"name": "Get all services",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "867b0b65-0b31-4646-871d-137a1a3b4a65",
								"exec": [
									"eval(globals.commonSuccessTests)();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/services",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create service",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2be1362c-8b07-477b-a3e1-d89c1fc8d9b3",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"eval(globals.commonSuccessTests)();",
									"",
									"pm.test(\"Service json schema  should be valid\", function () {",
									"    const serviceSchema = JSON.parse(environment.serviceSchema);",
									"    pm.expect(tv4.validate(response, serviceSchema)).to.be.true;",
									"    console.log(\"Validation is failed: \" + tv4.error);",
									"});",
									"",
									"pm.test(\"Service name is correct\", function () {",
									"    pm.expect(response.name).to.eql(\"Demo Service\");",
									"});",
									"",
									"pm.environment.set(\"service_id\", response.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Demo Service\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/services",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get service details",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aaad2ab0-ae0d-495a-8c41-2bfb3d1cdae1",
								"exec": [
									"eval(globals.commonSuccessTests)();",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/services/{{service_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"services",
								"{{service_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update service",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "85be439f-c40a-49e1-817e-9902d587f8d4",
								"exec": [
									"eval(globals.commonSuccessTests)();",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/services/{{service_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"services",
								"{{service_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete service",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1aced71c-2096-4ff9-b9df-acf1da7ce71c",
								"exec": [
									"eval(globals.commonSuccessTests)();",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/services/{{service_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"services",
								"{{service_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "categories",
			"item": [
				{
					"name": "Get categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "25e0ff61-16ea-40c3-8233-0308b02186ea",
								"exec": [
									"eval(globals.commonSuccessTests)();",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/categories",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create category",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "884b3b51-7a93-42fc-98cd-725473a2a2b2",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"eval(globals.commonSuccessTests)();",
									"",
									"pm.test(\"Category json schema  should be valid\", function () {",
									"    const categorySchema = JSON.parse(environment.categorySchema);",
									"    pm.expect(tv4.validate(response, categorySchema)).to.be.true;",
									"    console.log(\"Validation is failed: \" + tv4.error);",
									"});",
									"",
									"pm.test(\"Category name is correct\", function () {",
									"    pm.expect(response.name).to.eql(\"Test category\");",
									"});",
									"",
									"pm.environment.set(\"category_id\", response.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test category\",\n  \"id\": \"{{$randomInt}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/categories",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get category details",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "556b6f8c-367b-43ee-a0cd-90d8cc2ec492",
								"exec": [
									"eval(globals.commonSuccessTests)();",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/categories/{{category_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"categories",
								"{{category_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update category",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c3231a14-e4b5-4832-b837-fc2a0b9ca31a",
								"exec": [
									"eval(globals.commonSuccessTests)();",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n  \"id\": \"string\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/categories/{{category_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"categories",
								"{{category_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete category",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3cc181c6-f311-46cc-9338-7241a347258b",
								"exec": [
									"eval(globals.commonSuccessTests)();",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/categories/{{category_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"categories",
								"{{category_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "utilities",
			"item": [
				{
					"name": "Get version",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3bc33559-10b7-4ee8-8e01-e7f6eafed5d4",
								"exec": [
									"eval(globals.commonSuccessTests)();",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/version",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"version"
							]
						}
					},
					"response": []
				},
				{
					"name": "Healthcheck",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e529cd64-184f-401f-95e6-b451f1801117",
								"exec": [
									"eval(globals.commonSuccessTests)();",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/healthcheck",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"healthcheck"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "negative cases",
			"item": [
				{
					"name": "Get products \"Page not found\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e8cee373-a180-44a3-9a63-4fbcbbbf98d3",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"postman.setGlobalVariable(\"commonFailTests\", () => {",
									"    ",
									"  tests[\"Status code should be 404\"] = responseCode.code ===  404;",
									"  ",
									"  tests[\"Content-Type should be application/json\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/json;\");",
									"  ",
									"  tests[\"Response time should be less than 200ms\"] = responseTime < 500;",
									"  ",
									"    pm.test('Response body should be valid', () => {",
									"    pm.response.to.be.not.empty;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"  });",
									"  ",
									"    pm.test(\"Error message should be correct\", function () {",
									"    pm.expect(response.name).to.eql(\"NotFound\");",
									"    pm.expect(response.message).to.eql(\"Page not found\");",
									"});",
									"",
									"});",
									"",
									"eval(globals.commonFailTests)();",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/productstest",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"productstest"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get products \"No record found for id\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e8cee373-a180-44a3-9a63-4fbcbbbf98d3",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"postman.setGlobalVariable(\"commonNoRecordTests\", () => {",
									"    ",
									"  tests[\"Status code should be 404\"] = responseCode.code ===  404;",
									"  ",
									"  tests[\"Content-Type should be application/json\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/json;\");",
									"  ",
									"  tests[\"Response time should be less than 200ms\"] = responseTime < 500;",
									"  ",
									"    pm.test('Response body should be valid', () => {",
									"    pm.response.to.be.not.empty;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"  });",
									"  ",
									"    pm.test(\"Error message should be correct\", function () {",
									"    pm.expect(response.name).to.eql(\"NotFound\");",
									"    pm.expect(pm.response.text()).to.include(\"No record found for id \");",
									"    ",
									"});",
									"",
									"});",
									"",
									"eval(globals.commonNoRecordTests)();",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/products/111",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"111"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all stores \"Page not found\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "afc6b66d-5f20-401c-8697-956f150d4805",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"eval(globals.commonFailTests)();",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/storestest",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"storestest"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all stores \"No record found for id\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "afc6b66d-5f20-401c-8697-956f150d4805",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"eval(globals.commonNoRecordTests)();",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/stores/11132",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"stores",
								"11132"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all services \"Page not found\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "867b0b65-0b31-4646-871d-137a1a3b4a65",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"eval(globals.commonFailTests)();",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/servicestest",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"servicestest"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all services \"No record found for id\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "867b0b65-0b31-4646-871d-137a1a3b4a65",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"eval(globals.commonNoRecordTests)();",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/services/111",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"services",
								"111"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get categories \"Page not found\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "25e0ff61-16ea-40c3-8233-0308b02186ea",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"eval(globals.commonFailTests)();",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/categoriestest",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"categoriestest"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get categories \"No record found for id\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "25e0ff61-16ea-40c3-8233-0308b02186ea",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"eval(globals.commonNoRecordTests)();",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/categories/1111",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"categories",
								"1111"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}